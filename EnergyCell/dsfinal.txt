#1
char Aclass(3,32)
Adymosim
1.4
Final state generated by Dymosim


#    Experiment parameters
double experiment(7,1)
       1                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       2                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(115,26)
system.fType
system.f
system.f_nom
system.f_lim[1]
system.f_lim[2]
system.alpha0
system.refType
system.dynType
system.omega_nom
system.w_nom
system.synRef
system.initime
system.thetaRel
system.omega
system.receiveFreq.H
system.receiveFreq.w_H
system.receiveFreq.h
system.receiveFreq.w_h
system.omega_internal
transPh.y[1]
transPh.y[2]
transPh.n
transPh.t_change
transPh.t_duration
transPh.a_start
transPh.a_end
transPh.ph_start
transPh.ph_end
transPh.coef
voltage.term.v[1]
voltage.term.v[2]
voltage.term.v[3]
voltage.term.i[1]
voltage.term.i[2]
voltage.term.i[3]
voltage.term.theta[1]
voltage.puUnits
voltage.V_nom
voltage.S_nom
voltage.neutral.v
voltage.neutral.i
voltage.V_base
voltage.theta
voltage.der(theta)
voltage.fType
voltage.f
voltage.use_vPhasor_in
voltage.omega_internal
voltage.v0
voltage.alpha0
voltage.phi
grd.term.v
dynLoad.term.v[3]
dynLoad.term.theta[1]
dynLoad.term.der(theta[1])
dynLoad.term.der(theta[2])
dynLoad.v[3]
dynLoad.v_n
dynLoad.i_n
dynLoad.puUnits
dynLoad.V_nom
dynLoad.S_nom
dynLoad.dynType
dynLoad.use_pq_in
dynLoad.pq0[1]
dynLoad.pq0[2]
dynLoad.r_n
dynLoad.S_base
dynLoad.R_base
dynLoad.R_n
dynLoad.omega[1]
dynLoad.omega[2]
dynLoad.pq[1]
dynLoad.pq[2]
dynLoad.cpl
dynLoad.psi[1]
dynLoad.der(psi[1])
dynLoad.psi[2]
dynLoad.der(psi[2])
dynLoad.psi[3]
dynLoad.der(psi[3])
dynLoad.c0
dynLoad.V2_nom
dynLoad.Z_start[1]
dynLoad.Z_start[2]
dynLoad.v_start[1]
dynLoad.v_start[2]
dynLoad.i_start[1]
dynLoad.i_start[2]
dynLoad.Z[1]
dynLoad.der(Z[1])
dynLoad.Z[2]
dynLoad.der(Z[2])
dynLoad.imax
dynLoad.as[1]
dynLoad.as[2]
dynLoad.at[1]
dynLoad.at[2]
dynLoad.t_rec[1]
dynLoad.t_rec[2]
dynLoad.tcst
dynLoad.pq_st[1]
dynLoad.pq_st[2]
dynLoad.v2
dynLoad.v2_pu
dynLoad.x[1]
dynLoad.der(x[1])
dynLoad.x[2]
dynLoad.der(x[2])
dynLoad.vs[1]
dynLoad.vs[2]
dynLoad.vt[1]
dynLoad.vt[2]
dynLoad.xT[1]
dynLoad.xT[2]

double initialValue(115,6)
 -2       1                       1                       3                
  6   258   # system.fType
 -2      50                       0                       0                
  6   256   # system.f
 -2      50                       0                       0                
  6   256   # system.f_nom
 -2      25                       0                       0                
  6   256   # system.f_lim[1]
 -2     100                       0                       0                
  6   256   # system.f_lim[2]
 -2  2.0943951023932001E+00       0                       0                
  6   256   # system.alpha0
 -2       1                       1                       2                
  6   258   # system.refType
 -2       3                       1                       4                
  6   258   # system.dynType
 -2  3.1415926535897933E+02       0                       0                
  6   256   # system.omega_nom
 -2  3.1415926535897933E+02       0                       0                
  6   256   # system.w_nom
 -2       1                       0                       0                
  6   257   # system.synRef
 -2       0                       0                       0                
  6   256   # system.initime
 -2       0                       0                       0                
  6   256   # system.thetaRel
 -2  3.1415926535897933E+02       0                       0                
  6   256   # system.omega
 -2       0                       0                       0                
  6   388   # system.receiveFreq.H
 -2       0                       0                       0                
  6   388   # system.receiveFreq.w_H
 -2       0                       0                       0                
  6   260   # system.receiveFreq.h
 -2       0                       0                       0                
  6   260   # system.receiveFreq.w_h
 -2  3.1415926535897933E+02       0                       0                
  6  1280   # system.omega_internal
 -2       1                       0                       0                
  6   256   # transPh.y[1]
 -2       0                       0                       0                
  6   256   # transPh.y[2]
 -2       2                       0                       0                
  6   258   # transPh.n
 -1  5.0000000000000000E-01       0                       0                
  1   280   # transPh.t_change
 -1       1                       0                       0                
  1   280   # transPh.t_duration
 -1       1                       0                       0                
  1   280   # transPh.a_start
 -1       1                       0                       0                
  1   280   # transPh.a_end
 -1       0                       0                       0                
  1   280   # transPh.ph_start
 -1       0                       0                       0                
  1   280   # transPh.ph_end
 -2  5.4365636569180902E+00       0                       0                
  6  1280   # transPh.coef
 -2 -5.0000000000000400E-01       0                       0                
  6   260   # voltage.term.v[1]
 -2  8.6602540378443627E-01       0                       0                
  6   260   # voltage.term.v[2]
 -2       0                       0                       0                
  6   260   # voltage.term.v[3]
 -2  5.2295855157738913E+01       0                       0                
  6   388   # voltage.term.i[1]
 -2 -9.9104718992141272E+01       0                       0                
  6   388   # voltage.term.i[2]
 -2       0                       0                       0                
  6   388   # voltage.term.i[3]
 -2       0                       0                       0                
  6   260   # voltage.term.theta[1]
 -2       1                       0                       0                
  6   257   # voltage.puUnits
 -2       1                       0                 1.0000000000000000E+100
  6   256   # voltage.V_nom
 -2       1                       0                 1.0000000000000000E+100
  6   256   # voltage.S_nom
 -2       0                       0                       0                
  6   260   # voltage.neutral.v
 -2       0                       0                       0                
  6   388   # voltage.neutral.i
 -2       1                       0                       0                
  6  1280   # voltage.V_base
 -2  3.1415926535897933E+02       0                       0                
  6  1280   # voltage.theta
 -2  3.1415926535897933E+02       0                       0                
  6  1280   # voltage.der(theta)
 -2       3                       1                       3                
  6   258   # voltage.fType
 -2      50                       0                       0                
  6   256   # voltage.f
 -2       1                       0                       0                
  6   257   # voltage.use_vPhasor_in
 -2       0                       0                       0                
  6  1280   # voltage.omega_internal
 -1       1                       0                       0                
  1   280   # voltage.v0
 -1       0                       0                       0                
  1   280   # voltage.alpha0
 -2  2.0943951023932001E+00       0                       0                
  6  1280   # voltage.phi
 -2       0                       0                       0                
  6   260   # grd.term.v
 -2       0                       0                       0                
  6   260   # dynLoad.term.v[3]
 -2       0                       0                       0                
  6   260   # dynLoad.term.theta[1]
 -2       0                       0                       0                
  6   260   # dynLoad.term.der(theta[1])
 -2  3.1415926535897933E+02       0                       0                
  6   260   # dynLoad.term.der(theta[2])
 -2       0                       0                       0                
  6   256   # dynLoad.v[3]
 -2       0                       0                       0                
  6   256   # dynLoad.v_n
 -2       0                       0                       0                
  6   288   # dynLoad.i_n
 -2       1                       0                       0                
  6   257   # dynLoad.puUnits
 -2     230                       0                 1.0000000000000000E+100
  6   256   # dynLoad.V_nom
 -2  5.0000000000000000E+07       0                 1.0000000000000000E+100
  6   256   # dynLoad.S_nom
 -2       3                       1                       4                
  6   258   # dynLoad.dynType
 -2       0                       0                       0                
  6   257   # dynLoad.use_pq_in
 -1  8.6602540378443860E-01       0                 1.0000000000000000E+100
  1   280   # dynLoad.pq0[1]
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # dynLoad.pq0[2]
 -1       0                       0                 1.0000000000000000E+100
  1   280   # dynLoad.r_n
 -2  5.0000000000000000E+07       0                       0                
  6  1280   # dynLoad.S_base
 -2  1.0579999999999999E-03       0                       0                
  6  1280   # dynLoad.R_base
 -2       0                       0                       0                
  6  1280   # dynLoad.R_n
 -2       0                       0                       0                
  6  1280   # dynLoad.omega[1]
 -2  3.1415926535897933E+02       0                       0                
  6  1280   # dynLoad.omega[2]
 -2  4.3301270189221933E+07       0                       0                
  6  1280   # dynLoad.pq[1]
 -2  2.5000000000000000E+07       0                       0                
  6  1280   # dynLoad.pq[2]
 -1       0                 -5.0000000000000000E-01       1                
  1   280   # dynLoad.cpl
 -2 -5.6512212662505211E-05       0                       0                
  2   272   # dynLoad.psi[1]
 -2 -1.1102230246251565E-16       0                       0                
  3   256   # dynLoad.der(psi[1])
 -2  1.0709504488737492E-04       0                       0                
  2   272   # dynLoad.psi[2]
 -2       0                       0                       0                
  3   256   # dynLoad.der(psi[2])
 -2       0                       0                       0                
  2   272   # dynLoad.psi[3]
 -2       0                       0                       0                
  3   256   # dynLoad.der(psi[3])
 -2       1                       0                       0                
  6  1280   # dynLoad.c0
 -2   52900                       0                       0                
  6  1280   # dynLoad.V2_nom
 -2  9.1625487720393614E-04       0                       0                
  6  1280   # dynLoad.Z_start[1]
 -2  5.2900000000000006E-04       0                       0                
  6  1280   # dynLoad.Z_start[2]
 -2 -1.1500000000000092E+02       0                       0                
  6  1280   # dynLoad.v_start[1]
 -2  1.9918584287042034E+02       0                       0                
  6  1280   # dynLoad.v_start[2]
 -2 -1.0042316998161197E-09       0                       0                
  6  1280   # dynLoad.i_start[1]
 -2  2.1739130434782608E+05       0                       0                
  6  1280   # dynLoad.i_start[2]
 -2  8.9176302398716305E-03       0                       0                
  2  1296   # dynLoad.Z[1]
 -2       0                       0                       0                
  3  1280   # dynLoad.der(Z[1])
 -2  3.3948838125531203E-04       0                       0                
  2  1296   # dynLoad.Z[2]
 -2       0                       0                       0                
  3  1280   # dynLoad.der(Z[2])
 -1       2                       0                       0                
  1   280   # dynLoad.imax
 -1  5.0000000000000000E-01       0                       0                
  1   280   # dynLoad.as[1]
 -1       1                       0                       0                
  1   280   # dynLoad.as[2]
 -1       2                       0                       0                
  1   280   # dynLoad.at[1]
 -1       2                       0                       0                
  1   280   # dynLoad.at[2]
 -1      60                       0                       0                
  1   280   # dynLoad.t_rec[1]
 -1      60                       0                       0                
  1   280   # dynLoad.t_rec[2]
 -1  1.0000000000000000E-02       0                       0                
  1   280   # dynLoad.tcst
 -2  2.8552012036008034E+06       0                       0                
  6  1280   # dynLoad.pq_st[1]
 -2  1.0869565217391301E+05       0                       0                
  6  1280   # dynLoad.pq_st[2]
 -2  9.9999999999999989E-01       0                       0                
  6  1280   # dynLoad.v2
 -2  1.8903591682419655E-05       0                       0                
  6  1280   # dynLoad.v2_pu
 -2  1.7126295924418896E+08       0                       0                
  2  1296   # dynLoad.x[1]
 -2       0                       0                       0                
  3  1280   # dynLoad.der(x[1])
 -2  6.4933837429111516E+06       0                       0                
  2  1296   # dynLoad.x[2]
 -2       0                       0                       0                
  3  1280   # dynLoad.der(x[2])
 -2  6.5938047339578698E-02       0                       0                
  6  1280   # dynLoad.vs[1]
 -2  4.3478260869565209E-03       0                       0                
  6  1280   # dynLoad.vs[2]
 -2  1.8903591682419655E-05       0                       0                
  6  1280   # dynLoad.vt[1]
 -2  1.8903591682419655E-05       0                       0                
  6  1280   # dynLoad.vt[2]
 -2  2.8543826540698162E+06       0                       0                
  6  1280   # dynLoad.xT[1]
 -2  1.0822306238185252E+05       0                       0                
  6  1280   # dynLoad.xT[2]


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(115,84)
system frequency type [:#(type=PowerSystems.Types.SystemFrequency)]
frequency if type is parameter, else initial frequency [Hz]
nominal frequency [Hz|Hz]
limit frequencies (for supervision of average frequency) [Hz]
limit frequencies (for supervision of average frequency) [Hz]
phase angle [rad|deg]
reference frame (3-phase) [:#(type=PowerSystems.Types.ReferenceFrame)]
transient or steady-state model [:#(type=PowerSystems.Types.Dynamics)]
nominal angular frequency [rad/s]
nom r.p.m. [rad/s|rpm]
[:#(type=Boolean)]
[s]
angle relative to reference frame [rad|deg]
[rad/s]
inertia constant [s]
angular velocity, inertia-weighted [rad|deg]
Dummy potential-variable to balance flow-variable H
Dummy potential-variable to balance flow-variable w_H
[rad/s]
output signal-vector [rad]
output signal-vector [rad]
dim of output signal-vector [:#(type=Integer)]
time when change [s]
transition duration [s]
initial norm |y|
final norm |y|
initial phase (y) [rad|deg]
final phase (y) [rad|deg]
[Hz]
voltage vector [V|kV]
voltage vector [V|kV]
voltage vector [V|kV]
current vector [A]
current vector [A]
current vector [A]
optional vector of phase angles [rad|deg]
= true, if scaled with nom. values (pu), else scaled with 1 (SI) [:#(type=Boolean)]
nominal Voltage (= base for pu) [V|kV]
nominal Power (= base for pu) [VA|MVA]
Potential at the pin [V]
Current flowing into the pin [A]
[V|kV]
absolute angle [rad|deg]
der(absolute angle) [rad/s]
frequency type [:#(type=PowerSystems.Types.SourceFrequency)]
frequency if type is parameter [Hz]
= true to use input signal vPhasor_in, otherwise use fixed values [:#(type=Boolean)]
Needed to connect to conditional connector [rad/s]
fixed voltage [V/V]
fixed phase angle [rad|deg]
[rad|deg]
Potential at the pin [V]
voltage vector [V|kV]
optional vector of phase angles [rad|deg]
der(optional vector of phase angles) [rad/s]
der(optional vector of phase angles) [rad/s]
voltage terminal to neutral [V|kV]
voltage neutral [V|kV]
current neutral [A]
= true, if scaled with nom. values (pu), else scaled with 1 (SI) [:#(type=Boolean)]
nominal Voltage (= base for pu) [V|V]
nominal Power (= base for pu) [VA|MVA]
transient or steady-state model [:#(type=PowerSystems.Types.Dynamics)]
= true to use input signal pq_in, otherwise use parameter pq0 [:#(type=Boolean)]
fixed {active, reactive} power (start value if use_pq_in) [W/W]
fixed {active, reactive} power (start value if use_pq_in) [W/W]
resistance neutral to grd [Ohm/(V.V/VA)]
[VA]
[Ohm]
[Ohm]
[rad/s]
[rad/s]
[W|MW]
[W|MW]
phase coupling x_m/x_s, (-1/2 < cpl < 1)
magnetic flux [Wb]
der(magnetic flux) [V]
magnetic flux [Wb]
der(magnetic flux) [V]
magnetic flux [Wb]
der(magnetic flux) [V]

[m4.kg2.s-6.A-2]
[Ohm]
[Ohm]
[V|kV]
[V|kV]
[A]
[A]
[Ohm]
[Ohm/s]
[Ohm]
[Ohm/s]
maximum current [1]
voltage exponent steady-state power
voltage exponent steady-state power
voltage exponent transient power
voltage exponent transient power
power recovery times [s]
power recovery times [s]
time constant Z [s]
[W|MW]
[W|MW]
[m4.kg2.s-6.A-2]
[1]
[J]
[W]
[J]
[W]




[W]
[W]

